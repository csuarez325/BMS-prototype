import java.util.*;

class User {
    String username;
    String password;
    String role;

    User(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }
}

class Item {
    String name;
    double price;
    int stock;
    int sold;
    int originalStock;

    Item(String name, double price, int stock) {
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.originalStock = stock;
        this.sold = 0;
    }

    void resetStock() {
        this.stock = this.originalStock;
        this.sold = 0;
    }
}

class Shift {
    String employeeName;
    String role;
    String shiftTime;

    Shift(String employeeName, String role, String shiftTime) {
        this.employeeName = employeeName;
        this.role = role;
        this.shiftTime = shiftTime;
    }
}

public class BMSPrototype {
    static Scanner scanner = new Scanner(System.in);
    static List<User> users = new ArrayList<>();
    static List<Item> menu = new ArrayList<>();
    static List<Shift> schedule = new ArrayList<>();

public static void main(String[] args) {
       seedData();
       login();
   }


   static void seedData() {
       users.add(new User("cashier1", "pass123", "Cashier"));
       users.add(new User("manager1", "admin123", "Manager"));


       menu.add(new Item("Latte", 3.50, 10));
       menu.add(new Item("Espresso", 2.75, 8));
       menu.add(new Item("Muffin", 1.80, 5));


       schedule.add(new Shift("Alice", "Cashier", "9AM - 1PM"));
       schedule.add(new Shift("Bob", "Barista", "1PM - 5PM"));
   }


   static void login() {
       System.out.println("=== Barista Management System ===");
       System.out.print("Username: ");
       String username = scanner.nextLine();
       System.out.print("Password: ");
       String password = scanner.nextLine();


       if (username.isEmpty() || password.isEmpty()) {
           System.out.println("Error: Username or password cannot be empty.");
           return;
       }


       for (User u : users) {
           if (u.username.equals(username) && u.password.equals(password)) {
               System.out.println("Login successful! Role: " + u.role);
               if (u.role.equals("Cashier")) {
                   posModule();
               } else if (u.role.equals("Manager")) {
                   managerModule();
               } else {
                   System.out.println("Feature for role '" + u.role + "' not implemented in prototype.");
               }
               return;
           }
       }
       System.out.println("Invalid credentials. Try again.");
   }


   static void posModule() {
       System.out.println("=== POS Module ===");
       double total = 0;


       while (true) {
           System.out.println("Menu:");
           for (int i = 0; i < menu.size(); i++) {
               Item item = menu.get(i);
               System.out.println((i + 1) + ". " + item.name + " ($" + item.price + ") - Stock: " + item.stock);
           }


           System.out.print("Select item number (or 0 to checkout, -1 to reset): ");
           int choice = Integer.parseInt(scanner.nextLine());


           if (choice == -1) {
               total = 0;
               for (Item item : menu) {
                   item.resetStock();
               }
               System.out.println("Order reset. Stock restored.");
               continue;
           }


           if (choice == 0) break;


           if (choice < 1 || choice > menu.size()) {
               System.out.println("Invalid choice. Try again.");
               continue;
           }


           Item selected = menu.get(choice - 1);
           System.out.print("Enter quantity: ");
           String qtyInput = scanner.nextLine();


           try {
               int qty = Integer.parseInt(qtyInput);


               if (qty <= 0 || qty > selected.stock) {
                   System.out.println("Invalid quantity. Must be >0 and <= stock.");
                   continue;
               }


               total += selected.price * qty;
               selected.stock -= qty;
               selected.sold += qty;
               System.out.println("Added to order: " + qty + " x " + selected.name);
           } catch (NumberFormatException e) {
               System.out.println("Invalid input. Quantity must be a number.");
           }
       }


       if (total == 0) {
           System.out.println("No items ordered. Returning to login screen.");
           return;
       }


       System.out.println("Order total: $" + total);
       System.out.println("Thank you! Order sent to kitchen.");
   }


   static void inventoryModule() {
       System.out.println("\n=== Inventory Management Module ===");


       while (true) {
           System.out.println("Current Inventory:");
           for (int i = 0; i < menu.size(); i++) {
               Item item = menu.get(i);
               System.out.println((i + 1) + ". " + item.name + " - Stock: " + item.stock);
               if (item.stock < 3) {
                   System.out.println("  >> WARNING: Low stock!");
               }
           }


           System.out.print("Select item to update (0 to logout): ");
           int index = Integer.parseInt(scanner.nextLine());


           if (index == 0) {
               System.out.println("Logging out of inventory module.");
               break;
           }


           if (index < 1 || index > menu.size()) {
               System.out.println("Invalid selection.");
               continue;
           }


           Item selected = menu.get(index - 1);
           System.out.print("Enter new stock quantity: ");
           try {
               int newQty = Integer.parseInt(scanner.nextLine());
               if (newQty < 0) {
                   System.out.println("Stock cannot be negative.");
                   continue;
               }
               selected.stock = newQty;
               System.out.println("Stock updated for " + selected.name + ": " + newQty);
           } catch (NumberFormatException e) {
               System.out.println("Invalid input. Please enter a number.");
           }
       }
   }

